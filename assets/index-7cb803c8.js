(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))l(t);new MutationObserver(t=>{for(const o of t)if(o.type==="childList")for(const c of o.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&l(c)}).observe(document,{childList:!0,subtree:!0});function n(t){const o={};return t.integrity&&(o.integrity=t.integrity),t.referrerpolicy&&(o.referrerPolicy=t.referrerpolicy),t.crossorigin==="use-credentials"?o.credentials="include":t.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function l(t){if(t.ep)return;t.ep=!0;const o=n(t);fetch(t.href,o)}})();/**
 * @license
 * @very-amused/argon2-wasm v0.3.4
 * MIT License
 * Copyright (c) 2022 Keith Scroggs
 */class b{constructor(e){this.worker=e,this.worker.addEventListener("message",n=>{this.onMessage(n)},!0)}onMessage(e){this.resolve&&this.resolve(e.data)}postMessage(e,n=[]){const l=new Promise(t=>{this.resolve=t});return this.worker.postMessage(e,n),l}terminate(){this.worker.removeEventListener("message",e=>{this.onMessage(e)},!0),this.worker.terminate()}}var m;(function(r){r.WorkerConnection=b,function(e){e[e.LoadArgon2=0]="LoadArgon2",e[e.Hash2i=1]="Hash2i",e[e.UnloadArgon2=2]="UnloadArgon2"}(r.Methods||(r.Methods={}))})(m||(m={}));const h=new m.WorkerConnection(new Worker("./argon2/worker.js")),i=document.querySelector.bind(document),s={password:i("input#password"),salt:i("input#salt"),timeCost:i("input#t_cost"),memoryCost:i("input#m_cost"),simd:i("input#simd_enabled"),run:i("input#submit"),result:i("span#result"),timer:i("section#timer"),timerValue:i("span#timer_value"),form:i("form#demoForm")};let g=s.simd.checked;(async function(){const r=await h.postMessage({method:m.Methods.LoadArgon2,params:{wasmRoot:".",simd:g,pthread:!0}});r.code!==0&&y(r.code)})();document.onclose=()=>{h.terminate()};function p(r){s.run.disabled=!1,s.result.textContent=r}function y(r){p(`Error:  (code ${r})`)}s.form.onsubmit=async r=>{r.preventDefault(),s.run.disabled=!0,s.result.textContent="";const e=s.simd.checked;if(e!==g){const a=await h.postMessage({method:m.Methods.LoadArgon2,params:{wasmRoot:".",simd:e,pthread:!1}});if(a.code!==0){y(a.code);return}g=e}let n,l=s.salt.value;if(l.length)try{const a=atob(l);n=new Uint8Array(a.length);for(let d=0;d<a.length;d++)n[d]=a.charCodeAt(d)}catch(a){const d=`Failed to decode salt (${a})`;p(`Error: ${d}`);return}else n=new Uint8Array(16),crypto.getRandomValues(n),l=btoa(String.fromCharCode.apply(null,Array.from(n))),s.salt.value=l;const t=parseInt(s.timeCost.value),o=s.memoryCost.value.toUpperCase();let c=0;if(o.endsWith("MB"))c=1024*parseInt(o);else if(o.endsWith("GB"))c=1024*1024*parseInt(o);else try{if(c=parseInt(o),isNaN(c))throw"Value entered in form is NaN"}catch(a){const d=`Failed to parse memory cost (${a})`;p(`Error: ${d}`);return}const w=performance.now(),f=await h.postMessage({method:m.Methods.Hash2i,params:{password:s.password.value.normalize("NFC"),salt:n,timeCost:t,memoryCost:c,hashLen:32}});let u=performance.now()-w;if(console.log(f),f.code===0){const a=btoa(String.fromCharCode.apply(null,Array.from(f.body)));p(a)}else y(f.code);const C=Math.floor(u/6e4).toString();u%=6e4;const v=Math.floor(u/1e3).toString();u%=1e3;const M=u.toString();s.timerValue.textContent=`${C}m ${v}s ${M}ms`};
